from abc import ABC, abstractmethod
from typing import Generic, TypeVar


T = TypeVar('T')


class LinkedList(ABC, Generic[T]):
    """
    АТД Связного Списка
    """
    HEAD_NIL: int = 0
    HEAD_OK: int = 1
    HEAD_ERR: int = 2
    TAIL_NIL: int = 0
    TAIL_OK: int = 1
    TAIL_ERR: int = 2
    RIGHT_NIL: int = 0
    RIGHT_OK: int = 1
    RIGHT_ERR: int = 2
    REMOVE_NIL: int = 0
    REMOVE_OK: int = 1
    REMOVE_ERR: int = 2
    REPLACE_NIL: int = 0
    REPLACE_OK: int = 1
    REPLACE_ERR: int = 2
    GET_NIL: int = 0
    GET_OK: int = 1
    GET_ERR: int = 2

    # Конструктор
    @abstractmethod
    def __init__(self) -> None:
        """
        Конструктор

        Постусловие: создан новый пустой связный список
        """

    # Комманды
    # Элементарные операции
    @abstractmethod
    def head(self) -> None:
        """
        Установить курсор на первый узел в списке

        Предусловие: список не пустой
        Постусловие: курсор находится на первом элементе в списке
        """

    @abstractmethod
    def tail(self) -> None:
        """
        Установить курсор на последний узел в списке

        Предусловие: список не пустой
        Постусловие: курсор находится на последнем элементе в списке
        """

    @abstractmethod
    def right(self) -> None:
        """
        Сдвинуть курсор на один узел вправо

        Предусловие: существует узел справа
        Постусловие: курсор смещен к правому элементу
        """

    # В следующих 2 методах не уверен,
    # можно ли их использовать на пустом списке,
    # но по идее да, иначе у нас не остается
    # способа вставить значение в пустой список
    # при помощи элементарных операций
    @abstractmethod
    def put_right(self, value: T) -> None:
        """
        Вставить следом за текущим узлом
        новый узел с заданным значением

        Постусловие: создан новый узел справа от курсора с значением value
                     или создан первый элемент в пустом списке
        """

    @abstractmethod
    def put_left(self, value: T) -> None:
        """
        Вставить перед текущим узлом
        новый узел с заданным значением

        Постусловие: создан новый узел слева от курсора с значением value
                     или создан первый элемент в пустом списке
        """

    @abstractmethod
    def remove(self) -> None:
        """
        Удалить текущий узел

        Предусловие: список не пустой
        Постусловие: курсор смещается к правому соседу, если он есть,
                     в противном случае курсор смещается к левому соседу,
                     если он есть
        """

    @abstractmethod
    def clear(self) -> None:
        """
        Очистить список

        Постусловие: список пустой
        """

    @abstractmethod
    def size(self) -> None:
        """
        Посчитать количество узлов в списке.
        """

    # Комманды
    # Сводимые к другим операции
    @abstractmethod
    def add_tail(self, value: T) -> None:
        """
        Добавить новый узел в хвост списка

        Постусловие: добавлен новый узел со значением value к конец списка
        """

    @abstractmethod
    def replace(self, value: T) -> None:
        """
        Заменить значение текущего узла на заданное

        Предусловие: курсор на некотором элементе (список не пустой)
        Постусловие: значение текущего узла изменено на value
        """

    # Здесь я не уверен, какое дожно быть поведение,
    # если справа не найдено значение
    # или если список пустой, но предполагаю,
    # что статус курсора остается без изменений
    # (даже если список пустой)
    @abstractmethod
    def find(self, value: T) -> None:
        """
        Установить курсор на следующий узел
        с искомым значением (по отношению к текущему узлу)

        Постусловие: если справа существует значение value,
                     то курсор установлен на первый узел с таким значением
        """

    @abstractmethod
    def remove_all(self, value: T) -> None:
        """
        Удалить в списке все узлы с заданным значением

        Постусловие: в списке нет ни одного узла со значением value
        """

    # Запросы
    # Элементарные
    @abstractmethod
    def get(self) -> T:
        """
        Получить значение текущего узла

        Предусловие: курсор на некотором значении (список не пустой)
        """

    @abstractmethod
    def is_value(self) -> bool:
        """
        Установлен ли курсор на какой-либо узел в списке (непустой ли список).
        """

    # Запросы
    # Производные
    @abstractmethod
    def is_head(self) -> None:
        """
        Находится ли курсор в начале списка?
        """

    @abstractmethod
    def is_tail(self) -> None:
        """
        Находится ли курсор в конце списка?
        """

    # Запросы на статус выполенения команд
    def get_head_status(self) -> int:
        """Возвращает статус выполения команды head"""

    def get_tail_status(self) -> int:
        """Возвращает статус выполнения команды tail"""

    def get_right_status(self) -> int:
        """Возвращает статус выполнения команды right"""

    def get_remove_status(self) -> int:
        """Возвращает статус выполнения команды remove"""

    def get_replace_status(self) -> int:
        """Возвращает статус выполнения команды replace"""

    def get_get_status(self) -> int:
        """Возвращает статус выполнения команды get"""
